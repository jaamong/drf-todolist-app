* token
when we have the token, we can be able to tell which user it is. and we can track everything they are trying to do.
but for it to be able to work, we need to basically write more code and configure it with the Django framework.
since it doesn't come with data verity authentication configured.

* AuthUserAPIView
인증된 사용자만 사용할 수 있도록 permission 지정. 인증된 사용자가 아닐 경우 에러.
```
from rest_framework import permissions
permission_classes = (permissions.IsAuthenticated, )
```
 - permissions.IsAuthenticated : users should have a token

login 후 얻은 token을 header에 설정(Bearer token)
-> 얻은 토큰을 이용하여 접근하려고 해도 에러 발생. 왜? 어플에서 authentication을 얻고 검증하는 로직을 생성하지 않았기 때문에
-> jwt.py에서 추가 구현. BaseAuthentication 상속.

* BaseAuthentication
if you go to the class, you will see that we need to implement a method called `authenticate`
-> if you want to create a custom authenticate, you need to inherit from `authentication.BaseAuthentication`
and implement the authenticate method

! NOTICE !
you need to set up `REST_FRAMEWORK` in settings.py. otherwise, Django doesn't know that we were creating a class
!!! But !!! don't put authentication class in the DEFAULT_AUTHENTICATION_CLASS setting.
By doing, you literally put the authentication class in every api view by default & potential to create a hidden bug.
Because some routes does not need to check for authentication(Ex. Register user)
You should set them in each view individually.

```
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES':
        'authentication.jwt.JWTAuthentication',  # 인증 구현한 클래스 작성 -> 하지마!!
}
```
위 세팅 대신 인증이 필요한 view에 아래 처럼 세팅
`authentication_classes = (authentication.jwt.JWTAuthentication,)`

